{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "db83b5ea-7fe2-11ec-87a3-40b076dccfad",
    "deck_config_uuid": "18175f68-7ca3-11ec-b906-40b076dccfad",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoAgain": 0,
            "autoAlert": 0,
            "autoAnswer": 0,
            "autoplay": false,
            "crowdanki_uuid": "18175f68-7ca3-11ec-b906-40b076dccfad",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0,
                    60.0,
                    300.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.9
            },
            "maxTaken": 60,
            "name": "Pimsleur 1 card",
            "new": {
                "bury": false,
                "delays": [
                    0.083333336,
                    0.41666666,
                    2.0,
                    10.0,
                    60.0,
                    300.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    1,
                    0
                ],
                "order": 1,
                "perDay": 0,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": false,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 0.75,
                "maxIvl": 60,
                "minSpace": 1,
                "perDay": 5000
            },
            "reviewOrder": 0,
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 2,
    "extendRev": 0,
    "media_files": [],
    "name": "Cubing",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "css": "/* Variables for frequently used values */\n:root {\n    /* Main background color of the card */\n    --main-bg-color: #434343;\n    --upper-bg-color: #555555;\n    --lower-bg-color: #434343;\n    --upper-fg-color: #eeeeee;\n    --lower-fg-color: #eeeeee;\n    /* Primary Accent Color, broken up into individual hsl values */\n    --colorPrimary-h: 260;\n    --colorPrimary-s: 60%;\n    --colorPrimary-l: 65%;\n    /* Set primary color variable from previously defined hsl values */\n    --primary-color: hsl(var(--colorPrimary-h), var(--colorPrimary-s), var(--colorPrimary-l));\n    /* Calculate Secondary and Tertiary Colors from the hsl values of the Primary Color */\n    --secondary-color: hsl(calc(var(--colorPrimary-h) + 240), var(--colorPrimary-s), var(--colorPrimary-l));\n    --tertiary-color: hsl(calc(var(--colorPrimary-h) + 120), var(--colorPrimary-s), var(--colorPrimary-l));\n    /* How big the stripe at the top should be */\n    --stripe-height: 5px;\n    /* How far elements such as flags should be away from the stripe */\n    --margin-from-stripe: 5px;\n}\n\nhtml,\nbody {\n    word-wrap: break-word;\n    background-color: var(--main-bg-color);\n    padding: 0;\n    margin: 0;\n}\nu {\n    text-decoration-style: wavy;\n    text-underline-position: under;\n    color: white;\n    padding: 1px;\n}\n\n/* Hide the default play button anki provides */\n.replay-button svg {\n    display: none;\n}\n.hidden {\n    display: none;\n}\n#answer {\n    font-size: 35px;\n}\n\n/* Main skeleton of an anki card */\n.card {\n    font-family: UD Digi Kyokasho N-R;\n    font-size: 0px;\n    text-align: center;\n}\n/* Div around all of the visible content of the card */\n.kard {\n    height: 100%;\n    background-color: var(--main-bg-color);\n}\n.kard.night_mode {\n    background-color: var(--main-bg-color);\n}\n/* Stripe at the top of the card */\n.stripe {\n    height: var(--stripe-height);\n    background-color: var(--primary-color);\n}\n.stripe.night_mode {\n    background-color: var(--primary-color);\n}\n\n/* Upper part of the card (Question) */\n.body-upper {\n    font-family: Noto Sans;\n    font-size: 30px;\n    color: var(--upper-fg-color);\n    background-color: var(--upper-bg-color);\n    padding: 30px 10px 30px;\n    border-radius: 0px 0px 0px 0px;\n}\n.body-upper.night_mode {\n    color: var(--upper-fg-color);\n    background-color: var(--upper-bg-color);\n}\n/* Lower part of the card (Answer) */\n.body-lower {\n    text-align: left;\n    color: var(--lower-fg-color);\n    height: 100%;\n    padding: 25px 10px 25px 10px;\n    border-radius: 0px 0px 0px 0px;\n}\n.body-lower.night_mode {\n    color: var(--lower-fg-color);\n    color: var(--lower-bg-color);\n}\n\n.notes {\n    font-family: Noto Sans Regular;\n    font-size: 20px;\n    text-align: center;\n    font-weight: bold;\n}\n\n/* Show extra information button */\n.extra_toggle {\n    display: block;\n    font-family: Noto Sans Regular;\n    font-size: 15px;\n    color: var(--upper-fg-color);\n    background-color: var(--upper-bg-color);\n    border-radius: 0px;\n    padding: 5px;\n    width: 50%;\n    text-align: center;\n    font-weight: 500;\n    margin: auto;\n    margin-top: 20px;\n    transition: all 0.15s ease-out;\n}\n.extra_toggle:hover {\n    filter: brightness(90%);\n}\n\n/* Div containing extra information, hidden by default */\n.extra {\n    display: none;\n    font-family: Noto Sans Regular;\n    font-size: 15px;\n    border: 3px dashed var(--primary-color);\n    color: var(--upper-fg-color);\n    padding: 20px;\n    margin: 30px 20px 3px 20px;\n    text-align: center;\n    font-weight: 500;\n}\n/* Div containing mnemonics or notes, situated inside the extra div */\n.mnemonic {\n    display: block;\n    margin-bottom: 2%;\n    border-color: var(--secondary-color);\n}\n\n/* Contains extra elements at the top, e.g. flags */\n.top-container {\n    width: 100%;\n    position: absolute;\n    top: calc(var(--stripe-height) + var(--margin-from-stripe));\n    left: 0;\n}\n.extra-top-right {\n    position: absolute;\n    right: var(--margin-from-stripe);\n}\n.extra-top-left {\n    position: absolute;\n    left: var(--margin-from-stripe);\n}\n.extra-top-right img {\n    float: right;\n    width: 55px;\n    border-radius: 10%;\n}\n.extra-top-left img {\n    float: left;\n    width: 55px;\n    border-radius: 10%;\n}\n\n/* Style cloze to use the primary color as the background color to make the cloze deletion easier to spot */\n.cloze {\n    background-color: var(--primary-color);\n}\n.cloze.night_mode {\n    background-color: var(--primary-color);\n}\n\n/* Highlighting classes */\n.hightlight-1 {\n    background-color: var(--primary-color);\n\tdisplay: inline;\n}\n\n.hightlight-2 {\n    background-color: var(--secondary-color);\n\tdisplay: inline;\n}\n\n.hightlight-3 {\n    background-color: var(--tertiary-color);\n\tdisplay: inline;\n}\n\n.hightlight-1.night_mode {\n    background-color: var(--primary-color);\n\tdisplay: inline;\n}\n\n.hightlight-2.night_mode {\n    background-color: var(--secondary-color);\n\tdisplay: inline;\n}\n\n.hightlight-3.night_mode {\n    background-color: var(--tertiary-color);\n\tdisplay: inline;\n}\n",
            "flds": [
                {
                    "font": "Liberation Sans",
                    "name": "Algset",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                },
                {
                    "font": "Liberation Sans",
                    "name": "Title",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Liberation Sans",
                    "name": "Algorithm",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Liberation Sans",
                    "name": "AlgorithmVerbose",
                    "ord": 3,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Liberation Sans",
                    "name": "Note",
                    "ord": 4,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Liberation Sans",
                    "name": "Categorie",
                    "ord": 5,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "prettyCube",
            "req": [
                [
                    0,
                    "any",
                    [
                        2,
                        3
                    ]
                ]
            ],
            "sortf": 1,
            "tmpls": [
                {
                    "afmt": "<div class=\"kard\">\n    <div class=\"stripe\"></div>\n    <div class=\"body-upper\">\n        {{Algset}} - {{Title}}\n    </div>\n\n    <div class=\"body-lower\">\n        <div class=\"notes\">\n\t\t\t<div id=\"cube\"></div>\n\t\t\t<br/><br/>\n\t\t\t\n            <b>{{Algorithm}}</b>\n\t\t\t<br/><br/>\n\t\t\t<hr>\n\t\t\t<br/>\n            <i>{{AlgorithmVerbose}}</i>\n\t\t\t<br/><br/>\n            <i>{{Note}}</i>\n        </div>\n    </div>\n</div>\n\n<div id=\"tags\" style=\"display: none;\">{{Tags}}</div>\n<div id=\"algorithm\" style=\"display: none;\">{{#AlgorithmVerbose}}{{AlgorithmVerbose}}{{/AlgorithmVerbose}}{{^AlgorithmVerbose}}{{Algorithm}}{{/AlgorithmVerbose}}⁩</div>\n\n<script>\n\tfunction loadResource(localPath, onlinePath, type) {\n        return new Promise((resolve, reject) => {\n            let element = document.createElement(type);\n            if (type == \"link\") {\n                element.setAttribute('rel', 'stylesheet');\n                element.type = 'text/css';\n            }\n            element.onload = resolve;\n            // localPath/onlinePath not implement yet, mainly because idk how to download the files automatically on first use\n            element.onerror = function() {}\n            if (type == \"link\") {\n                element.href = onlinePath;\n            } else {\n                element.src = onlinePath;\n            }\n            document.head.appendChild(element);\n        })\n    }\n    \n    var resources = [\n        loadResource(\"_svg.min.js\", \"https://cdn.jsdelivr.net/npm/svg.js@2.7.1/dist/svg.min.js\", \"script\"),\n        loadResource(\"_srVis.js\", \"https://cdn.jsdelivr.net/npm/sr-visualizer@1.0.11/dist/bundle/srVisualizer.min.js\", \"script\"),\n        loadResource(\"_peggy.js\", \"https://cdn.jsdelivr.net/npm/peggy@1.2.0/browser/peggy.min.js\", \"script\"),\n    ];\n    \n    Promise.all(resources).then(draw_cube);\n\n\tfunction get_alg() {\n\t\treturn document.getElementById('algorithm').innerText.replace(/[^A-Za-z '0-9']+/g, '');\n\t}\n\t\n\tfunction make_setup() {\n\t\tCube.initSolver();\n\t\tconst cube = new Cube();\n\t\tcube.move(Cube.inverse(get_alg()));\n\t\tdocument.getElementById('setup').innerHTML = Cube.inverse(cube.solve());\n\t}\n\n\tfunction draw_cube() {\n  \t\tlet SRVisualizer = window['sr-visualizer'];\n\t\tconst parser = peggy.generate(grammar);\n\t\tlet alg = parser.parse(get_alg());\n\t\tlet setup_alg = alg_to_string(alg_inverse(alg));\n\t\tvar cube_size = 3;\n\t\tvar tags = document.getElementById(\"tags\").innerText.split(\" \");\n    \t\ttags.forEach(function (tag) {\n        \t\tvar split = tag.split(\"::\");\n        \t\tif (split[0] == \"Cubing\" && split[1] == \"CubeSize\") {\n            \t\tcube_size = Number(split[2]);\n        \t\t}\n    \t\t});\n  \t\tSRVisualizer.cubeSVG(document.getElementById('cube'), {\n\t\t\tview: 'plan',\n\t\t\talgorithm: setup_alg,\n\t\t\tcubeSize: cube_size,\n\t\t})\n\t}\n\n\t        const grammar = `\n        alg = (move:(move / move_group / conjugate / commutator) ws? {return move})+\n        move_group = paren_start moves:alg paren_end { return { \"move_group\": moves } }\n        conjugate = brack_start ws? setup:alg ws? conjugate_indicator ws? moves:alg ws? brack_end { return { \"conjugate\": { \"setup\": setup, \"moves\": moves } } }\n        commutator = brack_start ws? moves_a:alg ws? commutator_delimiter ws? moves_b:alg ws? brack_end { return { \"commutator\": { \"a\": moves_a, \"b\": moves_b } } }\n        sides = identifier:('f'i / 'b'i / 'u'i / 'd'i / 'r'i / 'l'i) { return { \"identifier\": identifier, \"type\": \"side\" } }\n        rotations = identifier:('x'i / 'y'i / 'z'i) { return { \"identifier\": identifier, \"type\": \"rotation\" } }\n        slices = identifier:('m'i / 'e'i / 's'i) { return { \"identifier\": identifier, \"type\": \"slice\" } }\n        move =  inner:(number?)\n                turn:(side:sides / rotation:rotations / slice:slices)\n                wide:wide_indicator?\n                count:(number?) prime:(\"'\"?)\n                { return {\n                    \"identifier\": turn.identifier.toUpperCase(),\n                    \"type\": turn.type,\n                    \"wide\": wide ? true : (turn.identifier == turn.identifier.toLowerCase() && turn.type == \"side\"),\n                    \"prime\": prime == \"'\",\n                    \"count\": count ? count : 1,\n                    \"inner_count\": inner ? inner : 1,\n                };\n            }\n\n        ws = \" \"\n        commutator_delimiter = ','\n        conjugate_indicator = ':'\n        wide_indicator = 'w'\n        number = [1-9]\n        paren_start = '('\n        paren_end = ')'\n        brack_start = '['\n        brack_end = ']'\n        `;\n\n        function commutator_inverse(commutator) {\n            [commutator[\"commutator\"][\"a\"], commutator[\"commutator\"][\"b\"]] = [commutator[\"commutator\"][\"b\"], commutator[\"commutator\"][\"a\"]];\n            return commutator;\n        }\n\n        function conjugate_inverse(conjugate) {\n            conjugate[\"conjugate\"][\"setup\"] = alg_inverse(conjugate[\"conjugate\"][\"setup\"]);\n            return conjugate;\n        }\n\n        function move_group_inverse(group) {\n            group[\"move_group\"] = alg_inverse(group[\"move_group\"]);\n            return group;\n        }\n\n        function alg_inverse(alg) {\n            var result = [];\n            alg.slice().reverse().forEach((x) => {\n                if (x[\"commutator\"]) {\n                    result.push(commutator_inverse(x));\n                }\n                else if (x[\"conjugate\"]) {\n                    result.push(conjugate_inverse(x));\n                }\n                else if (x[\"move_group\"]) {\n                    result.push(move_group_inverse(x));\n                }\n                else {\n                    x[\"prime\"] = !x[\"prime\"];\n                    result.push(x);\n                }\n            })\n            return result;\n        }\n\n        function commutator_to_string(commutator) {\n            if (!commutator[\"commutator\"]) {throw 'Not a commutator';}\n            result = \" \";\n            result += alg_to_string(commutator[\"commutator\"][\"a\"]);\n            result += \" \";\n            result += alg_to_string(commutator[\"commutator\"][\"b\"]);\n            result += \" \";\n            result += alg_to_string(alg_inverse(commutator[\"commutator\"][\"a\"]));\n            result += \" \";\n            result += alg_to_string(alg_inverse(commutator[\"commutator\"][\"b\"]));\n            result += \" \";\n            return result;\n        }\n\n        function conjugate_to_string(conjugate) {\n            if (!conjugate[\"conjugate\"]) {throw 'Not a conjugate';}\n            result = \" \";\n            result += alg_to_string(conjugate[\"conjugate\"][\"setup\"]);\n            result += \" \";\n            result += alg_to_string(conjugate[\"conjugate\"][\"moves\"]);\n            result += \" \";\n            result += alg_to_string(alg_inverse(conjugate[\"conjugate\"][\"setup\"]));\n            result += \" \";\n            return result;\n        }\n\n        function move_group_to_string(group) {\n            if (!group[\"move_group\"]) {throw 'Not a move group';}\n            result += \" \";\n            result = \"(\";\n            result += alg_to_string(group[\"move_group\"]);\n            result += \")\";\n            result += \" \";\n            return result;\n        }\n\n        function alg_to_string(alg) {\n            result = \" \";\n            alg.forEach((x) => {\n                if (x[\"commutator\"]) {\n                    result += commutator_to_string(x);\n                }\n                else if (x[\"conjugate\"]) {\n                    result += conjugate_to_string(x);\n                }\n                else if (x[\"move_group\"]) {\n                    result += move_group_to_string(x);\n                }\n                else {\n                    result += \" \"\n                        + (x[\"inner_count\"] === 1 ? \"\" : x[\"inner_count\"])\n                        + (x[\"identifier\"])\n                        + (x[\"wide\"] === true ? \"w\" : \"\")\n                        + (x[\"count\"] === 1 ? \"\" : x[\"count\"])\n                        + (x[\"prime\"] === true ? \"'\" : \"\")\n                        ;\n                }\n                result += \" \";\n            })\n            return result.replace(/\\s+/g, \" \").trim();\n        }\n\n\n\t/* Set the primary color based on tag */\n    var tags = document.getElementById(\"tags\").innerText.split(\" \");\n    tags.forEach(function (tag) {\n        var split = tag.split(\"::\");\n        if (split[0] == \"Color\") {\n            var r = document.querySelector(\":root\");\n            r.style.setProperty(\"--primary-color\", split[1]);\n        }\n    });\n    /* Play audio when clicking the respective element */\n    function playAudio(fieldToPlay) {\n        var elem = document.querySelector(\"#\" + fieldToPlay + \" .soundLink, #\" + fieldToPlay + \" .replaybutton\");\n        if (elem) {\n            elem.click();\n        }\n    }\n    /* Autoplay some elements */\n    var elem = document.querySelector(\".autoplay .soundLink, .autoplay .replaybutton\");\n    if (elem) {\n        elem.click();\n    }\n</script>",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "<div class=\"kard\">\n    <div class=\"stripe\"></div>\n    <div class=\"body-upper\">\n        <i id=\"setup\"><i/>\n    </div>\n\n    <div class=\"body-lower\">\n        <div class=\"notes\">\n\t\t\t<div id=\"cube\"></div>\n            ?\n        </div>\n    </div>\n</div>\n\n<div id=\"tags\" style=\"display: none;\">{{Tags}}</div>\n<div id=\"algorithm\" style=\"display: none;\">{{#AlgorithmVerbose}}{{AlgorithmVerbose}}{{/AlgorithmVerbose}}{{^AlgorithmVerbose}}{{Algorithm}}{{/AlgorithmVerbose}}⁩</div>\n\n<script>\n\tfunction loadResource(localPath, onlinePath, type) {\n        return new Promise((resolve, reject) => {\n            let element = document.createElement(type);\n            if (type == \"link\") {\n                element.setAttribute('rel', 'stylesheet');\n                element.type = 'text/css';\n            }\n            element.onload = resolve;\n            // localPath/onlinePath not implement yet, mainly because idk how to download the files automatically on first use\n            element.onerror = function() {}\n            if (type == \"link\") {\n                element.href = onlinePath;\n            } else {\n                element.src = onlinePath;\n            }\n            document.head.appendChild(element);\n        })\n    }\n    \n    var resources = [\n        loadResource(\"_svg.min.js\", \"https://cdn.jsdelivr.net/npm/svg.js@2.7.1/dist/svg.min.js\", \"script\"),\n        loadResource(\"_srVis.js\", \"https://cdn.jsdelivr.net/npm/sr-visualizer@1.0.11/dist/bundle/srVisualizer.min.js\", \"script\"),\n        loadResource(\"_peggy.js\", \"https://cdn.jsdelivr.net/npm/peggy@1.2.0/browser/peggy.min.js\", \"script\"),\n    ];\n    \n    Promise.all(resources).then(draw_cube);\n\n\tfunction get_alg() {\n\t\treturn document.getElementById('algorithm').innerText.replace(/[^A-Za-z '0-9']+/g, '');\n\t}\n\t\n\tfunction make_setup() {\n\t\tCube.initSolver();\n\t\tconst cube = new Cube();\n\t\tcube.move(Cube.inverse(get_alg()));\n\t\tdocument.getElementById('setup').innerHTML = Cube.inverse(cube.solve());\n\t}\n\n\tfunction draw_cube() {\n  \t\tlet SRVisualizer = window['sr-visualizer'];\n\t\tconst parser = peggy.generate(grammar);\n\t\tlet alg = parser.parse(get_alg());\n\t\tlet setup_alg = alg_to_string(alg_inverse(alg));\n\t\tdocument.getElementById('setup').innerHTML = setup_alg;\n\t\tvar cube_size = 3;\n\t\tvar tags = document.getElementById(\"tags\").innerText.split(\" \");\n    \t\ttags.forEach(function (tag) {\n        \t\tvar split = tag.split(\"::\");\n        \t\tif (split[0] == \"Cubing\" && split[1] == \"CubeSize\") {\n            \t\tcube_size = Number(split[2]);\n        \t\t}\n    \t\t});\n  \t\tSRVisualizer.cubeSVG(document.getElementById('cube'), {\n\t\t\tview: 'plan',\n\t\t\talgorithm: setup_alg,\n\t\t\tcubeSize: cube_size,\n\t\t})\n\t}\n\n\t        const grammar = `\n        alg = (move:(move / move_group / conjugate / commutator) ws? {return move})+\n        move_group = paren_start moves:alg paren_end { return { \"move_group\": moves } }\n        conjugate = brack_start ws? setup:alg ws? conjugate_indicator ws? moves:alg ws? brack_end { return { \"conjugate\": { \"setup\": setup, \"moves\": moves } } }\n        commutator = brack_start ws? moves_a:alg ws? commutator_delimiter ws? moves_b:alg ws? brack_end { return { \"commutator\": { \"a\": moves_a, \"b\": moves_b } } }\n        sides = identifier:('f'i / 'b'i / 'u'i / 'd'i / 'r'i / 'l'i) { return { \"identifier\": identifier, \"type\": \"side\" } }\n        rotations = identifier:('x'i / 'y'i / 'z'i) { return { \"identifier\": identifier, \"type\": \"rotation\" } }\n        slices = identifier:('m'i / 'e'i / 's'i) { return { \"identifier\": identifier, \"type\": \"slice\" } }\n        move =  inner:(number?)\n                turn:(side:sides / rotation:rotations / slice:slices)\n                wide:wide_indicator?\n                count:(number?) prime:(\"'\"?)\n                { return {\n                    \"identifier\": turn.identifier.toUpperCase(),\n                    \"type\": turn.type,\n                    \"wide\": wide ? true : (turn.identifier == turn.identifier.toLowerCase() && turn.type == \"side\"),\n                    \"prime\": prime == \"'\",\n                    \"count\": count ? count : 1,\n                    \"inner_count\": inner ? inner : 1,\n                };\n            }\n\n        ws = \" \"\n        commutator_delimiter = ','\n        conjugate_indicator = ':'\n        wide_indicator = 'w'\n        number = [1-9]\n        paren_start = '('\n        paren_end = ')'\n        brack_start = '['\n        brack_end = ']'\n        `;\n\n        function commutator_inverse(commutator) {\n            [commutator[\"commutator\"][\"a\"], commutator[\"commutator\"][\"b\"]] = [commutator[\"commutator\"][\"b\"], commutator[\"commutator\"][\"a\"]];\n            return commutator;\n        }\n\n        function conjugate_inverse(conjugate) {\n            conjugate[\"conjugate\"][\"setup\"] = alg_inverse(conjugate[\"conjugate\"][\"setup\"]);\n            return conjugate;\n        }\n\n        function move_group_inverse(group) {\n            group[\"move_group\"] = alg_inverse(group[\"move_group\"]);\n            return group;\n        }\n\n        function alg_inverse(alg) {\n            var result = [];\n            alg.slice().reverse().forEach((x) => {\n                if (x[\"commutator\"]) {\n                    result.push(commutator_inverse(x));\n                }\n                else if (x[\"conjugate\"]) {\n                    result.push(conjugate_inverse(x));\n                }\n                else if (x[\"move_group\"]) {\n                    result.push(move_group_inverse(x));\n                }\n                else {\n                    x[\"prime\"] = !x[\"prime\"];\n                    result.push(x);\n                }\n            })\n            return result;\n        }\n\n        function commutator_to_string(commutator) {\n            if (!commutator[\"commutator\"]) {throw 'Not a commutator';}\n            result = \" \";\n            result += alg_to_string(commutator[\"commutator\"][\"a\"]);\n            result += \" \";\n            result += alg_to_string(commutator[\"commutator\"][\"b\"]);\n            result += \" \";\n            result += alg_to_string(alg_inverse(commutator[\"commutator\"][\"a\"]));\n            result += \" \";\n            result += alg_to_string(alg_inverse(commutator[\"commutator\"][\"b\"]));\n            result += \" \";\n            return result;\n        }\n\n        function conjugate_to_string(conjugate) {\n            if (!conjugate[\"conjugate\"]) {throw 'Not a conjugate';}\n            result = \" \";\n            result += alg_to_string(conjugate[\"conjugate\"][\"setup\"]);\n            result += \" \";\n            result += alg_to_string(conjugate[\"conjugate\"][\"moves\"]);\n            result += \" \";\n            result += alg_to_string(alg_inverse(conjugate[\"conjugate\"][\"setup\"]));\n            result += \" \";\n            return result;\n        }\n\n        function move_group_to_string(group) {\n            if (!group[\"move_group\"]) {throw 'Not a move group';}\n            result += \" \";\n            result = \"(\";\n            result += alg_to_string(group[\"move_group\"]);\n            result += \")\";\n            result += \" \";\n            return result;\n        }\n\n        function alg_to_string(alg) {\n            result = \" \";\n            alg.forEach((x) => {\n                if (x[\"commutator\"]) {\n                    result += commutator_to_string(x);\n                }\n                else if (x[\"conjugate\"]) {\n                    result += conjugate_to_string(x);\n                }\n                else if (x[\"move_group\"]) {\n                    result += move_group_to_string(x);\n                }\n                else {\n                    result += \" \"\n                        + (x[\"inner_count\"] === 1 ? \"\" : x[\"inner_count\"])\n                        + (x[\"identifier\"])\n                        + (x[\"wide\"] === true ? \"w\" : \"\")\n                        + (x[\"count\"] === 1 ? \"\" : x[\"count\"])\n                        + (x[\"prime\"] === true ? \"'\" : \"\")\n                        ;\n                }\n                result += \" \";\n            })\n            return result.replace(/\\s+/g, \" \").trim();\n        }\n\n\t/* Set the primary color based on tag */\n    var tags = document.getElementById(\"tags\").innerText.split(\" \");\n    tags.forEach(function (tag) {\n        var split = tag.split(\"::\");\n        if (split[0] == \"Color\") {\n            var r = document.querySelector(\":root\");\n            r.style.setProperty(\"--primary-color\", split[1]);\n        }\n    });\n    /* Play audio when clicking the respective element */\n    function playAudio(fieldToPlay) {\n        var elem = document.querySelector(\"#\" + fieldToPlay + \" .soundLink, #\" + fieldToPlay + \" .replaybutton\");\n        if (elem) {\n            elem.click();\n        }\n    }\n    /* Autoplay some elements */\n    var elem = document.querySelector(\".autoplay .soundLink, .autoplay .replaybutton\");\n    if (elem) {\n        elem.click();\n    }\n</script>"
                }
            ],
            "type": 0
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Jb Perm",
                "(R U R' F') (R U R' U') R' F R2 U' R'",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "cJLgQUm<zG",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Na Perm",
                "R U R' U (Jb Perm) U2 R U' R'",
                "R U R' U ((R U R' F') (R U R' U') R' F R2 U' R') U2 R U' R'",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "L$05Y9D$i?",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Y Perm",
                "F (R U' R' U') (R U R') F' (R U R' U') (R' F R F')",
                "",
                "",
                "Diagonal Corner Swap"
            ],
            "guid": "tQAB&rV/:_",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Ua",
                "M2 U M U2 M' U M2",
                "",
                "",
                "Edges Only"
            ],
            "guid": "m88,+zw~2S",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Ub",
                "M2 U' M U2 M' U' M2",
                "",
                "",
                "Edges Only"
            ],
            "guid": "N|Zu>HS8eh",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "H",
                "M2 U M2 U2 M2 U M2",
                "",
                "",
                "Edges Only"
            ],
            "guid": "e~+gh(C)F[",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Z",
                "M U M2 U M2 U M U2 M2",
                "",
                "",
                "Edges Only"
            ],
            "guid": "xPc6/b{J=9",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "T",
                "(R U R' U') R' F R2 U' R' U' (R U R') F'",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "q/9MkWP+iW",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Ga",
                "(R2 U R' U) (R' U' R U') R2 (U' D) (R' U R) D'",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "Qkw!O9fpr1",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Gc",
                "(R2 U' R U') (R U R' U) R2 (U D') (R U' R') D",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "h!vh?FYa8R",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Ja",
                "x R2 F R F' (R U2 r' U) r U2",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "eNK:3xti*s",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "F",
                "R' U' F' (R U R' U') R' F (R2 U' R' U') (R U R' U) R",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "uustH],vl+",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Gb",
                "(R' U' R) (U D') (R2 U R' U) (R U' R U') R2 D",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "l:ee)|qi0!",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Gd",
                "(R U R') (U' D) (R2 U' R U') (R' U R' U) R2 D'",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "uw#K?za5$d",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Aa",
                "x L2 D2 (L' U' L) D2 (L' U L')",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "A*;dC/Pwrh",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Ab",
                "x' L2 D2 (L U L') D2 (L U' L)",
                "",
                "",
                "Adjacent Corner Swap"
            ],
            "guid": "lkl7)1cN-C",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL",
                "Cubing::CubeSize::3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "OLL",
                "Parity",
                "Rw' U2' Rw U2 Rw U2' Rw2' F2 Rw' U2 Rw' U2' F2 Rw2 F2<a href=\"https://cubedb.net/?stage=OLLParity&amp;type=alg&amp;rank=4&amp;scramble=z2&amp;crosscolor=White&amp;alg=Rw%27+U2%27+Rw+U2+Rw+U2%27+Rw2%27+F2+Rw%27+U2+Rw%27+U2%27+F2+Rw2+F2\"> <i></i></a>",
                "",
                "",
                ""
            ],
            "guid": "A<mutxF5Fi",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::4x4::OLL",
                "Cubing::CubeSize::4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Parity",
                "2R2 U2 2R2 Uw2 2R2 Uw2",
                "",
                "",
                ""
            ],
            "guid": "yWa!L^B/`u",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::4x4::PLL",
                "Cubing::CubeSize::4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "F2L",
                "Last Edges",
                "Dw R F' U R' F Dw'",
                "",
                "",
                ""
            ],
            "guid": "owli1&:hUQ",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::4x4::F2L",
                "Cubing::CubeSize::4"
            ]
        }
    ]
}