{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "db83b5ea-7fe2-11ec-87a3-40b076dccfad",
    "deck_config_uuid": "18175f68-7ca3-11ec-b906-40b076dccfad",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoAgain": 0,
            "autoAlert": 0,
            "autoAnswer": 0,
            "autoplay": false,
            "crowdanki_uuid": "18175f68-7ca3-11ec-b906-40b076dccfad",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0,
                    60.0,
                    300.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.9
            },
            "maxTaken": 60,
            "name": "Pimsleur 1 card",
            "new": {
                "bury": false,
                "delays": [
                    0.083333336,
                    0.41666666,
                    2.0,
                    10.0,
                    60.0,
                    300.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    1,
                    0
                ],
                "order": 1,
                "perDay": 0,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": false,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 0.75,
                "maxIvl": 60,
                "minSpace": 1,
                "perDay": 5000
            },
            "reviewOrder": 0,
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 1,
    "extendRev": 0,
    "media_files": [],
    "name": "Cubing",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "css": "/* Variables for frequently used values */\n:root {\n    /* Main background color of the card */\n    --main-bg-color: #434343;\n    --upper-bg-color: #555555;\n    --lower-bg-color: #434343;\n    --upper-fg-color: #eeeeee;\n    --lower-fg-color: #eeeeee;\n    /* Primary Accent Color, broken up into individual hsl values */\n    --colorPrimary-h: 260;\n    --colorPrimary-s: 60%;\n    --colorPrimary-l: 65%;\n    /* Set primary color variable from previously defined hsl values */\n    --primary-color: hsl(var(--colorPrimary-h), var(--colorPrimary-s), var(--colorPrimary-l));\n    /* Calculate Secondary and Tertiary Colors from the hsl values of the Primary Color */\n    --secondary-color: hsl(calc(var(--colorPrimary-h) + 240), var(--colorPrimary-s), var(--colorPrimary-l));\n    --tertiary-color: hsl(calc(var(--colorPrimary-h) + 120), var(--colorPrimary-s), var(--colorPrimary-l));\n    /* How big the stripe at the top should be */\n    --stripe-height: 5px;\n    /* How far elements such as flags should be away from the stripe */\n    --margin-from-stripe: 5px;\n}\n\nhtml,\nbody {\n    word-wrap: break-word;\n    background-color: var(--main-bg-color);\n    padding: 0;\n    margin: 0;\n}\nu {\n    text-decoration-style: wavy;\n    text-underline-position: under;\n    color: white;\n    padding: 1px;\n}\n\n/* Hide the default play button anki provides */\n.replay-button svg {\n    display: none;\n}\n.hidden {\n    display: none;\n}\n#answer {\n    font-size: 35px;\n}\n\n/* Main skeleton of an anki card */\n.card {\n    font-family: UD Digi Kyokasho N-R;\n    font-size: 0px;\n    text-align: center;\n}\n/* Div around all of the visible content of the card */\n.kard {\n    height: 100%;\n    background-color: var(--main-bg-color);\n}\n.kard.night_mode {\n    background-color: var(--main-bg-color);\n}\n/* Stripe at the top of the card */\n.stripe {\n    height: var(--stripe-height);\n    background-color: var(--primary-color);\n}\n.stripe.night_mode {\n    background-color: var(--primary-color);\n}\n\n/* Upper part of the card (Question) */\n.body-upper {\n    font-family: Noto Sans;\n    font-size: 30px;\n    color: var(--upper-fg-color);\n    background-color: var(--upper-bg-color);\n    padding: 30px 10px 30px;\n    border-radius: 0px 0px 0px 0px;\n}\n.body-upper.night_mode {\n    color: var(--upper-fg-color);\n    background-color: var(--upper-bg-color);\n}\n/* Lower part of the card (Answer) */\n.body-lower {\n    text-align: left;\n    color: var(--lower-fg-color);\n    height: 100%;\n    padding: 25px 10px 25px 10px;\n    border-radius: 0px 0px 0px 0px;\n}\n.body-lower.night_mode {\n    color: var(--lower-fg-color);\n    color: var(--lower-bg-color);\n}\n\n.notes {\n    font-family: Noto Sans Regular;\n    font-size: 20px;\n    text-align: center;\n    font-weight: bold;\n}\n\n/* Show extra information button */\n.extra_toggle {\n    display: block;\n    font-family: Noto Sans Regular;\n    font-size: 15px;\n    color: var(--upper-fg-color);\n    background-color: var(--upper-bg-color);\n    border-radius: 0px;\n    padding: 5px;\n    width: 50%;\n    text-align: center;\n    font-weight: 500;\n    margin: auto;\n    margin-top: 20px;\n    transition: all 0.15s ease-out;\n}\n.extra_toggle:hover {\n    filter: brightness(90%);\n}\n\n/* Div containing extra information, hidden by default */\n.extra {\n    display: none;\n    font-family: Noto Sans Regular;\n    font-size: 15px;\n    border: 3px dashed var(--primary-color);\n    color: var(--upper-fg-color);\n    padding: 20px;\n    margin: 30px 20px 3px 20px;\n    text-align: center;\n    font-weight: 500;\n}\n/* Div containing mnemonics or notes, situated inside the extra div */\n.mnemonic {\n    display: block;\n    margin-bottom: 2%;\n    border-color: var(--secondary-color);\n}\n\n/* Contains extra elements at the top, e.g. flags */\n.top-container {\n    width: 100%;\n    position: absolute;\n    top: calc(var(--stripe-height) + var(--margin-from-stripe));\n    left: 0;\n}\n.extra-top-right {\n    position: absolute;\n    right: var(--margin-from-stripe);\n}\n.extra-top-left {\n    position: absolute;\n    left: var(--margin-from-stripe);\n}\n.extra-top-right img {\n    float: right;\n    width: 55px;\n    border-radius: 10%;\n}\n.extra-top-left img {\n    float: left;\n    width: 55px;\n    border-radius: 10%;\n}\n\n/* Style cloze to use the primary color as the background color to make the cloze deletion easier to spot */\n.cloze {\n    background-color: var(--primary-color);\n}\n.cloze.night_mode {\n    background-color: var(--primary-color);\n}\n\n/* Highlighting classes */\n.hightlight-1 {\n    background-color: var(--primary-color);\n\tdisplay: inline;\n}\n\n.hightlight-2 {\n    background-color: var(--secondary-color);\n\tdisplay: inline;\n}\n\n.hightlight-3 {\n    background-color: var(--tertiary-color);\n\tdisplay: inline;\n}\n\n.hightlight-1.night_mode {\n    background-color: var(--primary-color);\n\tdisplay: inline;\n}\n\n.hightlight-2.night_mode {\n    background-color: var(--secondary-color);\n\tdisplay: inline;\n}\n\n.hightlight-3.night_mode {\n    background-color: var(--tertiary-color);\n\tdisplay: inline;\n}\n",
            "flds": [
                {
                    "font": "Liberation Sans",
                    "name": "Algset",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                },
                {
                    "font": "Liberation Sans",
                    "name": "Title",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Liberation Sans",
                    "name": "Algorithm",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Liberation Sans",
                    "name": "AlgorithmVerbose",
                    "ord": 3,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Liberation Sans",
                    "name": "Note",
                    "ord": 4,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Liberation Sans",
                    "name": "Categorie",
                    "ord": 5,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                },
                {
                    "font": "Liberation Sans",
                    "name": "Setup",
                    "ord": 6,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "prettyCube",
            "req": [
                [
                    0,
                    "any",
                    [
                        2,
                        3,
                        6
                    ]
                ]
            ],
            "sortf": 1,
            "tmpls": [
                {
                    "afmt": "<div class=\"kard\">\n    <div class=\"stripe\"></div>\n    <div class=\"body-upper\">\n        {{Algset}} - {{Title}}\n    </div>\n\n    <div class=\"body-lower\">\n        <div class=\"notes\">\n\t\t\t<div id=\"cube\"></div>\n\t\t\t<br/><br/>\n\t\t\t\n            <b>{{Algorithm}}</b>\n\t\t\t<br/><br/>\n\t\t\t<hr>\n\t\t\t<br/>\n            <i>{{AlgorithmVerbose}}</i>\n\t\t\t<br/><br/>\n            <i>{{Note}}</i>\n        </div>\n    </div>\n</div>\n\n<div id=\"tags\" style=\"display: none;\">{{Tags}}</div>\n<!-- <div id=\"algorithm\" style=\"display: none;\">{{#AlgorithmVerbose}}{{AlgorithmVerbose}}{{/AlgorithmVerbose}}{{^AlgorithmVerbose}}{{Algorithm}}{{/AlgorithmVerbose}}⁩</div> -->\n<div id=\"algorithm\" style=\"display: none;\">{{Setup}}</div>\n\n<script>\n\tfunction loadResource(localPath, onlinePath, type) {\n        return new Promise((resolve, reject) => {\n            let element = document.createElement(type);\n            if (type == \"link\") {\n                element.setAttribute('rel', 'stylesheet');\n                element.type = 'text/css';\n            }\n            element.onload = resolve;\n            // localPath/onlinePath not implement yet, mainly because idk how to download the files automatically on first use\n            element.onerror = function() {}\n            if (type == \"link\") {\n                element.href = onlinePath;\n            } else {\n                element.src = onlinePath;\n            }\n            document.head.appendChild(element);\n        })\n    }\n    \n    var resources = [\n        loadResource(\"_svg.min.js\", \"https://cdn.jsdelivr.net/npm/svg.js@2.7.1/dist/svg.min.js\", \"script\"),\n        loadResource(\"_srVis.js\", \"https://cdn.jsdelivr.net/npm/sr-visualizer@1.0.11/dist/bundle/srVisualizer.min.js\", \"script\"),\n    ];\n    \n    Promise.all(resources).then(drawCube);\n\t\n\tfunction drawCube() {\n  \t\tlet SRVisualizer = window['sr-visualizer'];\n  \t\tSRVisualizer.cubeSVG(document.getElementById('cube'), {\n\t\t\tview: 'plan',\n\t\t\talgorithm: document.getElementById('algorithm').innerText,\n\t\t})\n\t}\n\n\t/* Set the primary color based on tag */\n    var tags = document.getElementById(\"tags\").innerText.split(\" \");\n    tags.forEach(function (tag) {\n        var split = tag.split(\"::\");\n        if (split[0] == \"Color\") {\n            var r = document.querySelector(\":root\");\n            r.style.setProperty(\"--primary-color\", split[1]);\n        }\n    });\n    /* Play audio when clicking the respective element */\n    function playAudio(fieldToPlay) {\n        var elem = document.querySelector(\"#\" + fieldToPlay + \" .soundLink, #\" + fieldToPlay + \" .replaybutton\");\n        if (elem) {\n            elem.click();\n        }\n    }\n    /* Autoplay some elements */\n    var elem = document.querySelector(\".autoplay .soundLink, .autoplay .replaybutton\");\n    if (elem) {\n        elem.click();\n    }\n</script>",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "<div class=\"kard\">\n    <div class=\"stripe\"></div>\n    <div class=\"body-upper\">\n        <i>{{Setup}}<i/>\n    </div>\n\n    <div class=\"body-lower\">\n        <div class=\"notes\">\n\t\t\t<div id=\"cube\"></div>\n            ?\n        </div>\n    </div>\n</div>\n\n<div id=\"tags\" style=\"display: none;\">{{Tags}}</div>\n<!-- <div id=\"algorithm\" style=\"display: none;\">{{#AlgorithmVerbose}}{{AlgorithmVerbose}}{{/AlgorithmVerbose}}{{^AlgorithmVerbose}}{{Algorithm}}{{/AlgorithmVerbose}}⁩</div> -->\n<div id=\"algorithm\" style=\"display: none;\">{{Setup}}</div>\n\n<script>\n\tfunction loadResource(localPath, onlinePath, type) {\n        return new Promise((resolve, reject) => {\n            let element = document.createElement(type);\n            if (type == \"link\") {\n                element.setAttribute('rel', 'stylesheet');\n                element.type = 'text/css';\n            }\n            element.onload = resolve;\n            // localPath/onlinePath not implement yet, mainly because idk how to download the files automatically on first use\n            element.onerror = function() {}\n            if (type == \"link\") {\n                element.href = onlinePath;\n            } else {\n                element.src = onlinePath;\n            }\n            document.head.appendChild(element);\n        })\n    }\n    \n    var resources = [\n        loadResource(\"_svg.min.js\", \"https://cdn.jsdelivr.net/npm/svg.js@2.7.1/dist/svg.min.js\", \"script\"),\n        loadResource(\"_srVis.js\", \"https://cdn.jsdelivr.net/npm/sr-visualizer@1.0.11/dist/bundle/srVisualizer.min.js\", \"script\"),\n    ];\n    \n    Promise.all(resources).then(drawCube);\n\t\n\tfunction drawCube() {\n  \t\tlet SRVisualizer = window['sr-visualizer'];\n  \t\tSRVisualizer.cubeSVG(document.getElementById('cube'), {\n\t\t\tview: 'plan',\n\t\t\talgorithm: document.getElementById('algorithm').innerText,\n\t\t})\n\t}\n\n\t/* Set the primary color based on tag */\n    var tags = document.getElementById(\"tags\").innerText.split(\" \");\n    tags.forEach(function (tag) {\n        var split = tag.split(\"::\");\n        if (split[0] == \"Color\") {\n            var r = document.querySelector(\":root\");\n            r.style.setProperty(\"--primary-color\", split[1]);\n        }\n    });\n    /* Play audio when clicking the respective element */\n    function playAudio(fieldToPlay) {\n        var elem = document.querySelector(\"#\" + fieldToPlay + \" .soundLink, #\" + fieldToPlay + \" .replaybutton\");\n        if (elem) {\n            elem.click();\n        }\n    }\n    /* Autoplay some elements */\n    var elem = document.querySelector(\".autoplay .soundLink, .autoplay .replaybutton\");\n    if (elem) {\n        elem.click();\n    }\n</script>"
                }
            ],
            "type": 0
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Jb Perm",
                "(R U R' F') (R U R' U') R' F R2 U' R'",
                "",
                "",
                "Adjacent Corner Swap",
                "B' R U R2 F2 R2 D' R2 U B2 R2 D F2 U' L2 F2 R' B2 U' L' U' L B' U2"
            ],
            "guid": "cJLgQUm<zG",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Na Perm",
                "R U R' U (Jb Perm) U2 R U' R'",
                "R U R' U ((R U R' F') (R U R' U') R' F R2 U' R') U2 R U' R'",
                "",
                "Adjacent Corner Swap",
                "L U R' D2 L2 B2 D' R2 B2 D2 L2 F2 D F2 U2 R2 U' L' U' L U2 L' R' U2"
            ],
            "guid": "L$05Y9D$i?",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Y Perm",
                "F (R U' R' U') (R U R') F' (R U R' U') (R' F R F')",
                "",
                "",
                "Diagonal Corner Swap",
                "L U F' B2 D B2 U2 R2 U R2 B2 D2 F2 D B2 R2 U2 R' U2 R' U' F' L' U'"
            ],
            "guid": "tQAB&rV/:_",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Ua",
                "M2 U M U2 M' U M2",
                "",
                "",
                "Edges Only",
                "F L' U F2 U' R2 U' L2 U R2 F2 L2 U' F2 L' F' U F' U F"
            ],
            "guid": "m88,+zw~2S",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Ub",
                "M2 U' M U2 M' U' M2",
                "",
                "",
                "Edges Only",
                "F D' L' D' R2 D L2 D R2 D2 R2 F2 D F2 U' R2 U L' D F D2 R2 D' R2 F2"
            ],
            "guid": "N|Zu>HS8eh",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "H",
                "M2 U M2 U2 M2 U M2",
                "",
                "",
                "Edges Only",
                "L' U L' B2 D' R2 U F2 U' L2 F2 D' B2 R' U' L2 R' F2 U'"
            ],
            "guid": "e~+gh(C)F[",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Z",
                "M U M2 U M2 U M U2 M2",
                "",
                "",
                "Edges Only",
                "L U L' B2 L2 U' B2 U' B2 U2 L2 B2 U B2 R' U' R U B2 U"
            ],
            "guid": "xPc6/b{J=9",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "T",
                "(R U R' U') R' F R2 U' R' U' (R U R') F'",
                "",
                "",
                "Adjacent Corner Swap",
                "F' R' U' L2 U L2 D' B2 R2 U2 R2 D' R2 U R2 D2 B' U L2 U' B' R F U"
            ],
            "guid": "q/9MkWP+iW",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Ga",
                "(R2 U R' U) (R' U' R U') R2 (U' D) (R' U R) D'",
                "",
                "",
                "Adjacent Corner Swap",
                "L' B D2 L2 F2 U' B2 R2 D U2 L2 F2 U B2 R' B' R' U2 B' U2 L U2"
            ],
            "guid": "Qkw!O9fpr1",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "PLL",
                "Gc",
                "(R2 U' R U') (R U R' U) R2 (U D') (R U' R') D",
                "",
                "",
                "Adjacent Corner Swap",
                "L' B U' L2 U' B2 U' L2 R2 F2 D2 R2 U B2 U' B L R' F' U' F' U R U'"
            ],
            "guid": "h!vh?FYa8R",
            "note_model_uuid": "db8500da-7fe2-11ec-87a3-40b076dccfad",
            "tags": [
                "Cubing::CFOP::PLL"
            ]
        }
    ]
}